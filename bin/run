#!/usr/bin/env ruby

require 'action_cable_client'
require 'optparse'

DEFAULTS = {
  gpio_util_path: '/home/mackinley/pi-actioncable-testing/bin/gpio_util',
  action_cable_host: 'localhost',
  action_cable_port: '3000'
}
parsed_options = DEFAULTS.dup
OptionParser.new do |opts|
  opts.on('-g', '--gpioutil-path=port', 'Path to gpio_util') do |v|
    parsed_options[:gpio_util_path] = v
  end
  opts.on('-h', '--actioncable-host=host', 'ActionCable Host') do |v|
    parsed_options[:action_cable_host] = v
  end
  opts.on('-p', '--actioncable-port=port', 'ActionCable Port') do |v|
    parsed_options[:action_cable_port] = v
  end
end.parse!

EventMachine.run do
  uri = "ws://#{parsed_options[:action_cable_host]}:#{parsed_options[:action_cable_port]}/cable"

  outputs_channel = ActionCableClient.new(uri, 'GpioOutputsChannel')

  outputs_channel.connected do
    puts 'Outputs connected!'
  end


  outputs_channel.subscribed do
    outputs_channel.perform('follow', {})
  end

  # called whenever a message is received from the server
  outputs_channel.received do |msg|
    puts "Message received: #{msg}"
    puts 'OUTPUT RECEIVED!'
    gpio_output = msg['message']['gpio_output']
    `sudo #{parsed_options[:gpio_util_path]} -p #{gpio_output['pin']} #{gpio_output['value']}`
  end

  outputs_channel.disconnected do
    puts 'Outputs disconnected!'
  end

  outputs_channel.errored  {|msg| puts msg }

  # inputs_channel = ActionCableClient.new(uri, 'GpioInputsChannel')
  #
  # inputs_channel.subscribed do
  #   inputs_channel.perform('follow', {})
  # end
  #
  # # called whenever a message is received from the server
  # inputs_channel.received do |msg|
  #   puts "Message received: #{msg}"
  #   puts 'INPUT RECEIVED!'
  #   gpio_input = msg['message']['gpio_input']
  #   result = `sudo #{parsed_options[:gpio_util_path]} -p #{gpio_input['pin']}`
  #   puts "Result: #{result}"
  # end
  #
  # inputs_channel.errored  {|msg| puts msg }
end
