#!/usr/bin/env ruby

require 'action_cable_client'
require 'optparse'

DEFAULTS = {
  gpio_util_path: '/home/mackinley/pi-actioncable-testing/bin/gpio_util',
  action_cable_host: 'localhost',
  action_cable_port: '3000'
}
parsed_options = DEFAULTS.dup
OptionParser.new do |opts|
  opts.on('-g', '--gpioutil-path=port', 'Path to gpio_util') do |v|
    parsed_options[:gpio_util_path] = v
  end
  opts.on('-h', '--actioncable-host=host', 'ActionCable Host') do |v|
    parsed_options[:action_cable_host] = v
  end
  opts.on('-p', '--actioncable-port=port', 'ActionCable Port') do |v|
    parsed_options[:action_cable_port] = v
  end
end.parse!

EventMachine.run do
  uri = "ws://#{parsed_options[:action_cable_host]}:#{parsed_options[:action_cable_port]}/cable"

  client = ActionCableClient.new(uri, 'GpioOutputsChannel')

  client.connected { puts 'successfully connected.' }

  client.subscribed do
    puts 'subscribed.'
    client.perform('follow', {})
  end

  # called whenever a message is received from the server
  client.received do |msg|
    puts "Message received: #{msg}"
    case msg['identifier']['channel']
      when 'GpioOutputsChannel'
        puts 'OUTPUT RECEIVED!'
        gpio_output = msg['message']['gpio_output']
        `sudo #{parsed_options[:gpio_util_path]} -p #{gpio_output['pin']} #{gpio_output['value']}`
      when 'GpioInputsChannel'
        puts 'INPUT RECEIVED!'
        gpio_input = msg['message']['gpio_input']
        result = `sudo #{parsed_options[:gpio_util_path]} -p #{gpio_input['pin']}`
        puts "Result: #{result}"
    end
  end

  client.errored  {|msg| puts msg }

  client.disconnected { puts 'disconnected.' }
end
